// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserTypes {
  id     String  @id @default(uuid())
  name   String  @unique
  price  Decimal
  active Boolean @default(true)
  users  User[]

  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now()) @updatedAt

  @@map("userTypes")
}

model User {
  id          String       @id @default(uuid())
  fullname    String
  email       String
  password    String
  phoneNumber String
  active      Boolean      @default(true)
  restaurants Restaurant[]

  createdAt   DateTime?  @default(now())
  updatedAt   DateTime?  @default(now()) @updatedAt
  UserTypes   UserTypes? @relation(fields: [userTypesId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userTypesId String?

  @@map("users")
}

model Restaurant {
  id            String         @id @default(uuid())
  corporateName String
  fantasyName   String
  cnpj          String
  phoneNumber   String
  siteName      String
  categories    Category[]
  customers     Customer[]
  neighborhoods Neighborhood[]

  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now()) @updatedAt
  User      User?     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String?

  @@map("restaurants")
}

model Category {
  id       String    @id @default(uuid())
  name     String
  products Product[]

  createdAt    DateTime?   @default(now())
  updatedAt    DateTime?   @default(now()) @updatedAt
  Restaurant   Restaurant? @relation(fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  restaurantId String?

  @@map("categories")
}

model Product {
  id          String  @id @default(uuid())
  name        String
  description String
  price       Decimal
  photo       String

  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @default(now()) @updatedAt
  Category   Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId String

  @@map("products")
}

model Customer {
  id          String    @id @default(uuid())
  fullname    String
  email       String
  password    String
  phoneNumber String
  address     Address[]
  orders      Order[]

  Restaurant   Restaurant? @relation(fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  restaurantId String?

  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now()) @updatedAt

  @@map("customers")
}

model Neighborhood {
  id      String    @id @default(uuid())
  title   String
  price   Decimal
  address Address[]

  createdAt    DateTime?   @default(now())
  updatedAt    DateTime?   @default(now()) @updatedAt
  Restaurant   Restaurant? @relation(fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  restaurantId String?

  @@map("neighborhoods")
}

model Address {
  id                String @id @default(uuid())
  address           String
  addressNumber     String
  addressComplement String

  createdAt      DateTime?     @default(now())
  updatedAt      DateTime?     @default(now()) @updatedAt
  Neighborhood   Neighborhood? @relation(fields: [neighborhoodId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  neighborhoodId String?
  Customer       Customer?     @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  customerId     String?
  orders         Order[]

  @@map("address")
}

model Order {
  id      String  @id @default(uuid())
  address Address @relation(fields: [addressId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  status  Boolean @default(false)
  draft   Boolean @default(true)

  orderItems OrderItems[]

  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())
  Customer   Customer? @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  customerId String?
  addressId  String

  @@map("orders")
}

model OrderItems {
  id     String @id @default(uuid())
  amount Int

  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  Order   Order?  @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId String?

  @@map("orderItems")
}
